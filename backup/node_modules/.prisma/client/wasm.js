
Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  NotFoundError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime
} = require('@prisma/client/runtime/wasm.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.NotFoundError = NotFoundError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DesignerFinanceiroScalarFieldEnum = {
  designer_id: 'designer_id',
  senha_hash: 'senha_hash',
  reset_token: 'reset_token',
  reset_token_expires: 'reset_token_expires',
  saldo_disponivel: 'saldo_disponivel',
  saldo_pendente: 'saldo_pendente',
  ultimo_saque_em: 'ultimo_saque_em',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em',
  chave_pix: 'chave_pix',
  pontuacao: 'pontuacao'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  DesignerFinanceiro: 'DesignerFinanceiro'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\Dell\\appsetordearte\\testes\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters"
    ],
    "sourceFilePath": "C:\\Users\\Dell\\appsetordearte\\testes\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "5.22.0",
  "engineVersion": "605197351a3c8bdd595af2d2a9bc3025bca48ea2",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": true,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "POSTGRES_PRISMA_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"] // Habilita o suporte para Vercel Postgres\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"POSTGRES_PRISMA_URL\")\n  directUrl = env(\"POSTGRES_URL_NON_POOLING\")\n}\n\nmodel DesignerFinanceiro {\n  designer_id         Int       @id\n  senha_hash          String? // Para armazenar a senha criptografada\n  reset_token         String?   @unique // Token para redefinir senha\n  reset_token_expires DateTime? // Data de expiração do token\n  saldo_disponivel    Decimal   @default(0.00) @db.Decimal(10, 2)\n  saldo_pendente      Decimal   @default(0.00) @db.Decimal(10, 2)\n  ultimo_saque_em     DateTime?\n  criado_em           DateTime  @default(now())\n  atualizado_em       DateTime  @updatedAt\n  chave_pix           String?\n  pontuacao           Int       @default(0)\n\n  @@map(\"designers_financeiro\")\n}\n",
  "inlineSchemaHash": "19b97b1c25d99a14ffd6a7aee6993c876c3347ab6cbf9fc4be4342674d881354",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"DesignerFinanceiro\":{\"fields\":[{\"name\":\"designer_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"senha_hash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reset_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reset_token_expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"saldo_disponivel\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"saldo_pendente\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"ultimo_saque_em\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"criado_em\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"atualizado_em\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"chave_pix\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pontuacao\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":\"designers_financeiro\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine 
  }
}

config.injectableEdgeEnv = () => ({
  parsed: {
    POSTGRES_PRISMA_URL: typeof globalThis !== 'undefined' && globalThis['POSTGRES_PRISMA_URL'] || typeof process !== 'undefined' && process.env && process.env.POSTGRES_PRISMA_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

